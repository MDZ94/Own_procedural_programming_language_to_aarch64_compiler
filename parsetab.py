
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEAPOSTROF COMA DIVIDE ELSE EQUALS IF IF_ELSE INT INT_FUN IS_EQUAL LEFT_BRACKET LEFT_CURLY_BRACKET LESS LESS_OR_EQUAL MAIN MINUS MORE MORE_OR_EQUAL MULTIPLY NAME PLUS PRINT RETURN RIGHT_BRACKET RIGHT_CURLY_BRACKET SEMICOLON STRING VOID WHILE\n        code    : code_block\n                | code_blocks\n        \n            code_blocks : code_block code_blocks\n                        | code_block code_block\n            \n        code_block  : main\n                    | funct_def \n        \n        instruction   : NAME LEFT_BRACKET empty RIGHT_BRACKET SEMICOLON\n                    | NAME LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON\n                    | NAME LEFT_BRACKET function_input RIGHT_BRACKET SEMICOLON\n        \n        function_input  : expression COMA expression\n                        | expression COMA function_input\n        \n        funct_def   : INT_FUN NAME funct_param LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET\n                    | VOID NAME funct_param LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET\n        \n        funct_param : LEFT_BRACKET empty RIGHT_BRACKET\n                    | LEFT_BRACKET expression RIGHT_BRACKET\n                    | LEFT_BRACKET expressions RIGHT_BRACKET\n        \n        expressions : expression COMA expression\n                    | expressions COMA expression\n        \n        main : MAIN LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET\n             | MAIN LEFT_CURLY_BRACKET condition RIGHT_CURLY_BRACKET\n             | MAIN LEFT_CURLY_BRACKET empty RIGHT_CURLY_BRACKET\n        \n        instruction : RETURN instruction \n        \n        condition : LEFT_BRACKET expression MORE expression RIGHT_BRACKET\n                   | LEFT_BRACKET expression LESS expression RIGHT_BRACKET\n                   | LEFT_BRACKET expression MORE_OR_EQUAL expression RIGHT_BRACKET\n                   | LEFT_BRACKET expression LESS_OR_EQUAL expression RIGHT_BRACKET\n                   | LEFT_BRACKET expression IS_EQUAL expression RIGHT_BRACKET\n        \n        instruction : WHILE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET\n        \n        instruction : IF condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET else\n                   | IF condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET if_else_block\n        \n        if_else_block : IF_ELSE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET else\n                      | IF_ELSE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET if_else_block\n        \n        else    : ELSE LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET\n                | ELSE LEFT_CURLY_BRACKET empty RIGHT_CURLY_BRACKET\n        \n        expression  : expression MULTIPLY expression\n                    | expression DIVIDE expression\n                    | expression PLUS expression\n                    | expression MINUS expression\n        \n        instruction : expression SEMICOLON\n                    | declaration SEMICOLON\n        \n        instruction    : instruction instruction\n        \n        expression : INT\n        \n        expression : NAME\n        \n        expression  : APOSTROF NAME APOSTROF\n        \n        declaration : INT_FUN NAME\n        \n        declaration : STRING NAME \n        \n        expression  : declaration EQUALS expression\n                    | NAME EQUALS expression\n        \n        declarations    : declaration COMA declaration\n                        | declaration COMA declarations\n        \n        instruction : PRINT LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON\n        \n        empty :\n        '
    
_lr_action_items = {'MAIN':([0,2,4,5,9,33,34,35,97,100,],[6,6,-5,-6,6,-19,-20,-21,-12,-13,]),'INT_FUN':([0,2,4,5,9,11,14,18,20,30,32,33,34,35,36,37,41,42,43,44,45,46,49,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,97,100,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[7,7,-5,-6,7,27,27,27,27,27,27,-19,-20,-21,27,27,-39,27,27,27,27,27,-40,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-12,-13,-7,-8,-9,-28,-51,-29,-30,27,27,27,-33,-34,27,-31,-32,]),'VOID':([0,2,4,5,9,33,34,35,97,100,],[8,8,-5,-6,8,-19,-20,-21,-12,-13,]),'$end':([1,2,3,4,5,9,10,33,34,35,97,100,],[0,-1,-2,-5,-6,-4,-3,-19,-20,-21,-12,-13,]),'LEFT_CURLY_BRACKET':([6,29,31,47,48,79,80,82,106,107,108,109,110,116,119,],[11,55,59,73,74,-14,-15,-16,-23,-24,-25,-26,-27,118,122,]),'NAME':([7,8,11,14,18,20,26,27,28,30,32,36,37,41,42,43,44,45,46,49,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[12,13,17,17,39,17,52,53,54,39,17,39,39,-39,39,39,39,39,17,-40,39,39,17,17,39,39,39,39,39,17,17,17,39,39,17,39,17,17,-7,-8,-9,-28,-51,-29,-30,17,17,17,-33,-34,17,-31,-32,]),'RETURN':([11,14,20,32,41,46,49,55,59,73,74,78,84,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[20,20,20,20,-39,20,-40,20,20,20,20,20,20,20,20,-7,-8,-9,-28,-51,-29,-30,20,20,20,-33,-34,20,-31,-32,]),'WHILE':([11,14,20,32,41,46,49,55,59,73,74,78,84,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[21,21,21,21,-39,21,-40,21,21,21,21,21,21,21,21,-7,-8,-9,-28,-51,-29,-30,21,21,21,-33,-34,21,-31,-32,]),'IF':([11,14,20,32,41,46,49,55,59,73,74,78,84,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[22,22,22,22,-39,22,-40,22,22,22,22,22,22,22,22,-7,-8,-9,-28,-51,-29,-30,22,22,22,-33,-34,22,-31,-32,]),'PRINT':([11,14,20,32,41,46,49,55,59,73,74,78,84,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[24,24,24,24,-39,24,-40,24,24,24,24,24,24,24,24,-7,-8,-9,-28,-51,-29,-30,24,24,24,-33,-34,24,-31,-32,]),'LEFT_BRACKET':([11,12,13,17,21,22,24,117,],[18,30,30,36,18,18,51,18,]),'RIGHT_CURLY_BRACKET':([11,14,15,16,32,41,46,49,78,84,94,95,101,102,105,106,107,108,109,110,111,113,114,115,118,120,121,123,124,125,127,128,],[-52,33,34,35,-41,-39,-22,-40,97,100,111,112,-7,-8,-9,-23,-24,-25,-26,-27,-28,-51,-29,-30,-52,123,124,-33,-34,126,-31,-32,]),'INT':([11,14,18,20,30,32,36,37,41,42,43,44,45,46,49,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[25,25,25,25,25,25,25,25,-39,25,25,25,25,25,-40,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-7,-8,-9,-28,-51,-29,-30,25,25,25,-33,-34,25,-31,-32,]),'APOSTROF':([11,14,18,20,30,32,36,37,41,42,43,44,45,46,49,50,51,52,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[26,26,26,26,26,26,26,26,-39,26,26,26,26,26,-40,26,26,77,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-7,-8,-9,-28,-51,-29,-30,26,26,26,-33,-34,26,-31,-32,]),'STRING':([11,14,18,20,30,32,36,37,41,42,43,44,45,46,49,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,101,102,105,111,113,114,115,118,120,122,123,124,125,127,128,],[28,28,28,28,28,28,28,28,-39,28,28,28,28,28,-40,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-7,-8,-9,-28,-51,-29,-30,28,28,28,-33,-34,28,-31,-32,]),'SEMICOLON':([17,19,23,25,39,53,54,63,69,70,71,72,75,77,85,86,88,96,],[-43,41,49,-42,-43,-45,-46,-48,-35,-36,-37,-38,-47,-44,101,102,105,113,]),'MULTIPLY':([17,19,25,38,39,57,61,63,69,70,71,72,75,76,77,89,90,91,92,93,98,99,103,],[-43,42,-42,42,-43,42,42,42,-35,-36,42,42,42,42,-44,42,42,42,42,42,42,42,42,]),'DIVIDE':([17,19,25,38,39,57,61,63,69,70,71,72,75,76,77,89,90,91,92,93,98,99,103,],[-43,43,-42,43,-43,43,43,43,-35,-36,43,43,43,43,-44,43,43,43,43,43,43,43,43,]),'PLUS':([17,19,25,38,39,57,61,63,69,70,71,72,75,76,77,89,90,91,92,93,98,99,103,],[-43,44,-42,44,-43,44,44,44,-35,-36,-37,-38,44,44,-44,44,44,44,44,44,44,44,44,]),'MINUS':([17,19,25,38,39,57,61,63,69,70,71,72,75,76,77,89,90,91,92,93,98,99,103,],[-43,45,-42,45,-43,45,45,45,-35,-36,-37,-38,45,45,-44,45,45,45,45,45,45,45,45,]),'EQUALS':([17,23,39,40,53,54,],[37,50,37,50,-45,-46,]),'MORE':([25,38,39,63,69,70,71,72,75,77,],[-42,64,-43,-48,-35,-36,-37,-38,-47,-44,]),'LESS':([25,38,39,63,69,70,71,72,75,77,],[-42,65,-43,-48,-35,-36,-37,-38,-47,-44,]),'MORE_OR_EQUAL':([25,38,39,63,69,70,71,72,75,77,],[-42,66,-43,-48,-35,-36,-37,-38,-47,-44,]),'LESS_OR_EQUAL':([25,38,39,63,69,70,71,72,75,77,],[-42,67,-43,-48,-35,-36,-37,-38,-47,-44,]),'IS_EQUAL':([25,38,39,63,69,70,71,72,75,77,],[-42,68,-43,-48,-35,-36,-37,-38,-47,-44,]),'RIGHT_BRACKET':([25,30,36,39,56,57,58,60,61,62,63,69,70,71,72,75,76,77,89,90,91,92,93,98,99,103,104,],[-42,-52,-52,-43,79,80,82,85,86,88,-48,-35,-36,-37,-38,-47,96,-44,106,107,108,109,110,-17,-18,-10,-11,]),'COMA':([25,39,57,58,61,63,69,70,71,72,75,77,98,99,103,],[-42,-43,81,83,87,-48,-35,-36,-37,-38,-47,-44,-17,-18,87,]),'ELSE':([112,126,],[116,116,]),'IF_ELSE':([112,126,],[117,117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'code_block':([0,2,9,],[2,9,9,]),'code_blocks':([0,2,9,],[3,10,10,]),'main':([0,2,9,],[4,4,4,]),'funct_def':([0,2,9,],[5,5,5,]),'instruction':([11,14,20,32,46,55,59,73,74,78,84,94,95,118,120,122,125,],[14,32,46,32,32,78,84,94,95,32,32,32,32,120,32,125,32,]),'condition':([11,21,22,117,],[15,47,48,119,]),'empty':([11,30,36,118,],[16,56,60,121,]),'expression':([11,14,18,20,30,32,36,37,42,43,44,45,46,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,118,120,122,125,],[19,19,38,19,57,19,61,63,69,70,71,72,19,75,76,19,19,89,90,91,92,93,19,19,19,98,99,19,103,19,19,19,19,19,19,]),'declaration':([11,14,18,20,30,32,36,37,42,43,44,45,46,50,51,55,59,64,65,66,67,68,73,74,78,81,83,84,87,94,95,118,120,122,125,],[23,23,40,23,40,23,40,40,40,40,40,40,23,40,40,23,23,40,40,40,40,40,23,23,23,40,40,23,40,23,23,23,23,23,23,]),'funct_param':([12,13,],[29,31,]),'expressions':([30,],[58,]),'function_input':([36,87,],[62,104,]),'else':([112,126,],[114,127,]),'if_else_block':([112,126,],[115,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> code_block','code',1,'p_code','myParser.py',436),
  ('code -> code_blocks','code',1,'p_code','myParser.py',437),
  ('code_blocks -> code_block code_blocks','code_blocks',2,'p_code_blocks','myParser.py',445),
  ('code_blocks -> code_block code_block','code_blocks',2,'p_code_blocks','myParser.py',446),
  ('code_block -> main','code_block',1,'p_code_block','myParser.py',452),
  ('code_block -> funct_def','code_block',1,'p_code_block','myParser.py',453),
  ('instruction -> NAME LEFT_BRACKET empty RIGHT_BRACKET SEMICOLON','instruction',5,'p_function_use','myParser.py',461),
  ('instruction -> NAME LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON','instruction',5,'p_function_use','myParser.py',462),
  ('instruction -> NAME LEFT_BRACKET function_input RIGHT_BRACKET SEMICOLON','instruction',5,'p_function_use','myParser.py',463),
  ('function_input -> expression COMA expression','function_input',3,'p_var_func_input','myParser.py',469),
  ('function_input -> expression COMA function_input','function_input',3,'p_var_func_input','myParser.py',470),
  ('funct_def -> INT_FUN NAME funct_param LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET','funct_def',6,'p_function_def','myParser.py',478),
  ('funct_def -> VOID NAME funct_param LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET','funct_def',6,'p_function_def','myParser.py',479),
  ('funct_param -> LEFT_BRACKET empty RIGHT_BRACKET','funct_param',3,'p_function_parameters','myParser.py',485),
  ('funct_param -> LEFT_BRACKET expression RIGHT_BRACKET','funct_param',3,'p_function_parameters','myParser.py',486),
  ('funct_param -> LEFT_BRACKET expressions RIGHT_BRACKET','funct_param',3,'p_function_parameters','myParser.py',487),
  ('expressions -> expression COMA expression','expressions',3,'p_expressions','myParser.py',493),
  ('expressions -> expressions COMA expression','expressions',3,'p_expressions','myParser.py',494),
  ('main -> MAIN LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET','main',4,'p_main_code','myParser.py',502),
  ('main -> MAIN LEFT_CURLY_BRACKET condition RIGHT_CURLY_BRACKET','main',4,'p_main_code','myParser.py',503),
  ('main -> MAIN LEFT_CURLY_BRACKET empty RIGHT_CURLY_BRACKET','main',4,'p_main_code','myParser.py',504),
  ('instruction -> RETURN instruction','instruction',2,'p_return','myParser.py',511),
  ('condition -> LEFT_BRACKET expression MORE expression RIGHT_BRACKET','condition',5,'p_condition','myParser.py',517),
  ('condition -> LEFT_BRACKET expression LESS expression RIGHT_BRACKET','condition',5,'p_condition','myParser.py',518),
  ('condition -> LEFT_BRACKET expression MORE_OR_EQUAL expression RIGHT_BRACKET','condition',5,'p_condition','myParser.py',519),
  ('condition -> LEFT_BRACKET expression LESS_OR_EQUAL expression RIGHT_BRACKET','condition',5,'p_condition','myParser.py',520),
  ('condition -> LEFT_BRACKET expression IS_EQUAL expression RIGHT_BRACKET','condition',5,'p_condition','myParser.py',521),
  ('instruction -> WHILE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET','instruction',5,'p_while','myParser.py',530),
  ('instruction -> IF condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET else','instruction',6,'p_if','myParser.py',538),
  ('instruction -> IF condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET if_else_block','instruction',6,'p_if','myParser.py',539),
  ('if_else_block -> IF_ELSE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET else','if_else_block',6,'p_if_else','myParser.py',545),
  ('if_else_block -> IF_ELSE condition LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET if_else_block','if_else_block',6,'p_if_else','myParser.py',546),
  ('else -> ELSE LEFT_CURLY_BRACKET instruction RIGHT_CURLY_BRACKET','else',4,'p_else','myParser.py',552),
  ('else -> ELSE LEFT_CURLY_BRACKET empty RIGHT_CURLY_BRACKET','else',4,'p_else','myParser.py',553),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','myParser.py',561),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','myParser.py',562),
  ('expression -> expression PLUS expression','expression',3,'p_expression','myParser.py',563),
  ('expression -> expression MINUS expression','expression',3,'p_expression','myParser.py',564),
  ('instruction -> expression SEMICOLON','instruction',2,'p_base_instruction','myParser.py',570),
  ('instruction -> declaration SEMICOLON','instruction',2,'p_base_instruction','myParser.py',571),
  ('instruction -> instruction instruction','instruction',2,'p_instruction_collector','myParser.py',579),
  ('expression -> INT','expression',1,'p_int','myParser.py',587),
  ('expression -> NAME','expression',1,'p_Expression_int_var','myParser.py',593),
  ('expression -> APOSTROF NAME APOSTROF','expression',3,'p_Expression_string_var','myParser.py',598),
  ('declaration -> INT_FUN NAME','declaration',2,'p_var_int_decl','myParser.py',604),
  ('declaration -> STRING NAME','declaration',2,'p_var_str_decl','myParser.py',610),
  ('expression -> declaration EQUALS expression','expression',3,'p_expression_var_assign','myParser.py',616),
  ('expression -> NAME EQUALS expression','expression',3,'p_expression_var_assign','myParser.py',617),
  ('declarations -> declaration COMA declaration','declarations',3,'p_var_declarations','myParser.py',623),
  ('declarations -> declaration COMA declarations','declarations',3,'p_var_declarations','myParser.py',624),
  ('instruction -> PRINT LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON','instruction',5,'p_print','myParser.py',630),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',640),
]
